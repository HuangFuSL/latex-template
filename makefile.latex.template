$(eval XELATEX ?= xelatex)
$(eval XELATEX_FLAGS ?= -shell-escape -synctex=1 -interaction=nonstopmode -file-line-error)
$(eval PDFLATEX ?= pdflatex)
$(eval PDFLATEX_FLAGS ?= -shell-escape -synctex=1 -interaction=nonstopmode -file-line-error)
$(eval LUALATEX ?= lualatex)
$(eval LUALATEX_FLAGS ?= -shell-escape -synctex=1 -interaction=nonstopmode -file-line-error)
$(eval DVISVGM ?= dvisvgm)
$(eval DVISVGM_FLAGS ?= --no-fonts -p1- -O --output=%f-%1p.svg)
$(eval TEXINPUTS ?= /opt/template//:)
$(eval EXTERNAL_FILES ?=)

# DO NOT EDIT BELOW THIS LINE

ifeq ($(DOCKER),1)
OLD_MAKEFLAGS := $(MAKEFLAGS)
MAKEFLAGS := -j 1
endif

# If not defined TARGET
$(eval TARGET ?= $(shell find . -name '*.tex' -and -type f | sed 's/\.tex$$//'))
# If the file contains `% !TEX root = ` (may or may not contain whitespaces), ignore it
$(eval TARGET := $(filter-out $(foreach file, $(TARGET), \
	$(shell grep -l '%\W*!\W*TEX\W*root\W*=\W*' $(file).tex | sed 's/\.tex$$//') \
), $(TARGET)))
WORKDIR := $(shell pwd)

help:
	@echo "Usage: make [target] [variable=value]"
	@echo "Targets:"
	@echo "  [xe-]default: compile with xelatex"
	@echo "  [xe-]all: compile with xelatex and bibtex"
	@echo "  svg: compile with xelatex and dvisvgm"
	@echo "  svg-all: compile with xelatex, bibtex and dvisvgm"
	@echo "  pdf-default: compile with pdflatex"
	@echo "  pdf-all: compile with pdflatex and bibtex"
	@echo "  lua-default: compile with lualatex"
	@echo "  lua-all: compile with lualatex and bibtex"
	@echo "  clean: clean all temporary files"
	@echo "  [help]: show this help message"
	@echo "Variables:"
	@echo "  It's recommended to set these variables in \`makefile\`"
	@echo "  COMPILE_NUM: number of times to compile, default 2"
	@echo "  TARGET: target file, default all .tex files"
	@echo "  TEXINPUTS: texinputs, default \"/opt/template//:\""
	@echo "  COMPILER: compiler to use, default \"xelatex\""
	@echo "  COMPILER_FLAGS: compiler flags to use, default is"
	@echo "    -shell-escape"
	@echo "    -synctex=1"
	@echo "    -interaction=nonstopmode"
	@echo "    -file-line-error"
	@echo "  BIBTEX: bibtex to use, default \"bibtex\""
	@echo "    Warning: biber engine is not supported by some packages"
	@echo "  -- !!! Read documentation before using these variables !!! --"
	@echo "  Use the following variables in command line"
	@echo "  Notice that in docker mode, TEXINPUTS does not work."
	@echo "  DOCKER: use docker to compile, default 0"
	@echo "  DOCKER_CONTEXT: docker context to use, default \"default\""
	@echo "  DOCKER_TAG: docker image tag to use, default \"latest\""
	@echo "Detected targets:"
	@$(foreach file, $(TARGET), echo "  $(file).tex";)

$(eval COMPILE_NUM ?= 2)
$(eval COMPILER ?= $(XELATEX))
$(eval COMPILER_FLAGS ?= $(XELATEX_FLAGS))
$(eval BIBTEX ?= bibtex)

# Use with caution
$(eval DOCKER ?= 0)
$(eval DOCKER_CONTEXT ?= default)
$(eval DOCKER_TAG ?= latest)

# Constants
AUXILIARY_FILES = *.aux *.log *.nav *.out *.snm *.toc *.vrb *.bbl *.blg *.dvi *.xmpi *.upa *.lua *.timestamp *.xmpdata *.xdv *.mx1

ifeq ($(DOCKER),1)
$(eval TEXINPUTS = /opt/template//:)
else
$(eval TEXINPUTS ?= /opt/template//:)
endif
export TEXINPUTS

_PRE_COMPILE:
ifeq ($(DOCKER),1)
	$(eval CONTAINER_ID := $(shell \
		docker --context $(DOCKER_CONTEXT) run --rm -d \
		ghcr.io/huangfusl/template:$(DOCKER_TAG) \
		sleep infinity \
	))
	docker --context $(DOCKER_CONTEXT) cp . $(CONTAINER_ID):/data
	for file in $(EXTERNAL_FILES); do \
		docker --context $(DOCKER_CONTEXT) cp $$file $(CONTAINER_ID):/data; \
	done
	docker --context $(DOCKER_CONTEXT) exec -i $(CONTAINER_ID) \
		make -f /opt/template/makefile.latex.template _PRE_COMPILE \
			DOCKER=2 TARGET="$(TARGET)" SVG=$(SVG) MAKEFLAGS="$(OLD_MAKEFLAGS)"
else
	-for file in $(TARGET); do \
		TARGET_DIR=$$(dirname $$file); \
		TITLE=$$(sed -n 's/^[[:space:]]*\\title{\(.*\)}/\1/p' $$file.tex); \
		AUTHOR=$$(sed -n 's/^[[:space:]]*\\author{\(.*\)}/\1/p' $$file.tex); \
		touch $$TARGET_DIR/$$file.xmpdata; \
		echo "\Title{$$TITLE}" >> $$file.xmpdata; \
		echo "\Author{$$AUTHOR}" >> $$file.xmpdata; \
	done

	for file in $(EXTERNAL_FILES); do \
		TARGET_NAME=$$(basename $$file); \
		ln -sf $$file $$TARGET_NAME; \
	done
endif

_COMPILE:
ifeq ($(DOCKER),1)
	docker --context $(DOCKER_CONTEXT) \
		exec -i $(CONTAINER_ID) \
		make -f /opt/template/makefile.latex.template _COMPILE \
			DOCKER=2 TARGET="$(TARGET)" COMPILE_NUM="$(COMPILE_NUM)" \
			COMPILER="$(COMPILER)" COMPILER_FLAGS="$(COMPILER_FLAGS)" \
			MAKEFLAGS="$(OLD_MAKEFLAGS)"
else
	-if [ $(DOCKER) -eq 2 ]; then \
		find . -type f -and -name '*.pdf' -delete; \
	fi

	-for file in $(TARGET); do \
		TARGET_DIR=$$(dirname $$file); \
		TARGET_NAME=$$(basename $$file); \
		cd $$TARGET_DIR; \
		for i in $$(seq 1 $(COMPILE_NUM)); do \
			$(COMPILER) $(COMPILER_FLAGS) $$TARGET_NAME; \
		done; \
		cd $(WORKDIR); \
	done
endif

_COMPILE_BIB:
ifeq ($(DOCKER),1)
	docker --context $(DOCKER_CONTEXT) \
		exec -i $(CONTAINER_ID) \
		make -f /opt/template/makefile.latex.template _COMPILE_BIB \
			DOCKER=2 COMPILER="$(COMPILER)" BIBTEX="$(BIBTEX)" \
			COMPILER_FLAGS="$(COMPILER_FLAGS)" TARGET="$(TARGET)" \
			MAKEFLAGS="$(OLD_MAKEFLAGS)"
else
	-for file in $(TARGET); do \
		TARGET_DIR=$$(dirname $$file); \
		TARGET_NAME=$$(basename $$file); \
		cd $$TARGET_DIR; \
		$(COMPILER) $(COMPILER_FLAGS) $$TARGET_NAME; \
		cd $(WORKDIR); \
	done
	-find . -name '*.aux' -exec $(BIBTEX) {} \;
endif

_COMPILE_ALL: | _COMPILE_BIB _COMPILE

_SVG:
ifeq ($(DOCKER),1)
	docker --context $(DOCKER_CONTEXT) \
		exec -i $(CONTAINER_ID) \
		make -f /opt/template/makefile.latex.template _SVG \
			DOCKER=2 TARGET="$(TARGET)" MAKEFLAGS="$(OLD_MAKEFLAGS)"
else
	if [ $(DOCKER) -eq 2 ]; then \
		find . -type f -and -name '*.svg' -delete; \
	fi
	for file in $(TARGET); do \
		TARGET_DIR=$$(dirname $$file); \
		TARGET_NAME=$$(basename $$file); \
		cd $$TARGET_DIR; \
		$(DVISVGM) $$TARGET_NAME.xdv $(DVISVGM_FLAGS); \
		cd $(WORKDIR); \
	done
endif

_POST_COMPILE:
ifeq ($(DOCKER),1)
	docker --context $(DOCKER_CONTEXT) \
		exec -i $(CONTAINER_ID) \
		make -f /opt/template/makefile.latex.template _POST_COMPILE \
			DOCKER=2 MAKEFLAGS="$(OLD_MAKEFLAGS)"
	docker --context $(DOCKER_CONTEXT) cp $(CONTAINER_ID):/data/. .
	docker --context $(DOCKER_CONTEXT) stop $(CONTAINER_ID)
else
	-for file in $(AUXILIARY_FILES); do \
		find . -name "$$file" -delete; \
	done
	find . -name '*.tex'
	-if [ $(DOCKER) -eq 2 ]; then \
		find . -type f -and -not -name '*.pdf' -and -not -name '*.svg' -delete; \
	fi
	-for file in $(EXTERNAL_FILES); do \
		TARGET_NAME=$$(basename $$file); \
		unlink $$TARGET_NAME; \
	done
endif

_XELATEX:
	$(eval COMPILER = $(XELATEX))
	$(eval COMPILER_FLAGS = $(XELATEX_FLAGS))

_PDFLATEX:
	$(eval COMPILER = $(PDFLATEX))
	$(eval COMPILER_FLAGS = $(PDFLATEX_FLAGS))

_LUALATEX:
	$(eval COMPILER = $(LUALATEX))
	$(eval COMPILER_FLAGS = $(LUALATEX_FLAGS))

_DVISVGM:
	$(eval COMPILER = $(XELATEX))
	$(eval COMPILER_FLAGS = $(XELATEX_FLAGS))
	$(eval COMPILER_FLAGS += -output-driver='xdvipdfmx -E -i dvipdfmx-unsafe.cfg' -no-pdf)

default: | _PRE_COMPILE _COMPILE _POST_COMPILE
all: | _PRE_COMPILE _COMPILE_ALL _POST_COMPILE
svg: | _DVISVGM _PRE_COMPILE _COMPILE _SVG _POST_COMPILE
svg-all: | _DVISVGM _PRE_COMPILE _COMPILE_ALL _SVG _POST_COMPILE
xe-default: | _XELATEX default
xe-all: | _XELATEX all
pdf-default: | _PDFLATEX default
pdf-all: | _PDFLATEX all
lua-default: | _LUALATEX default
lua-all: | _LUALATEX all
clean: | _POST_COMPILE
