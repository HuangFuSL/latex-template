XELATEX ?= xelatex
XELATEX_FLAGS ?= -shell-escape -interaction=nonstopmode
LUALATEX ?= lualatex
LUALATEX_FLAGS ?= -shell-escape -interaction=nonstopmode
DVISVGM ?= dvisvgm
DVISVGM_FLAGS ?= --no-fonts -p1- -O --output=%f-%1p.svg
TEXINPUTS ?= /opt/template//:
EXTERNAL_FILES ?=
SILENT ?= 0

COMPILE_NUM ?= 2
COMPILER ?= $(XELATEX)
COMPILER_FLAGS ?= $(XELATEX_FLAGS)
BIBTEX ?= bibtex

# Use with caution
DOCKER ?= 0
DOCKER_CONTEXT ?= default
DOCKER_TAG ?= latest
DOCKER_TIMEOUT ?= 1800

AUXILIARY_FILES += *.aux *.log *.nav *.out *.snm *.toc *.vrb *.bbl *.blg *.dvi
AUXILIARY_FILES += *.xmpi *.upa *.lua *.timestamp *.xmpdata *.xdv *.mx1
AUXILIARY_FILES += *-blx.bib *.xml

# DO NOT EDIT BELOW THIS LINE

# Detect OS to set `/dev/null` path
ifeq ($(OS),Windows_NT)
	WINNT := 1
	DEV_NULL := NUL
else
	WINNT := 0
	DEV_NULL := /dev/null
endif

# Detect make version
MAJOR_VERSION := $(shell $(MAKE) --version | sed -n 's/^GNU Make \([0-9]*\)\..*/\1/p')
MINOR_VERSION := $(shell $(MAKE) --version | sed -n 's/^GNU Make [0-9]*\.\([0-9]*\).*/\1/p')
PARALLEL := $(shell expr $(MAJOR_VERSION) \> 3 \& $(MINOR_VERSION) \> 3)

ifeq ($(PARALLEL),1)
else
$(warning WARNING: GNU Make $(MAJOR_VERSION).$(MINOR_VERSION) is detected)
$(warning Parallel execution is disabled)
.NOTPARALLEL:
endif

# Disable parallel execution in docker mode
ifeq ($(DOCKER),1)
TEXINPUTS = /opt/template//:
.NOTPARALLEL:
else
TEXINPUTS ?= /opt/template//:
endif
export TEXINPUTS

# If not defined TARGET
PATH_POSTFIX = | sed 's/\.tex$$//' | sed 's/^\.\///'
WORKDIR := $(shell pwd)
TARGET ?= $(shell find . -name '*.tex' -and -type f)
$(eval TARGET = $(foreach file, $(TARGET), $(shell echo $(file) $(PATH_POSTFIX))))
# If the file contains `% !TEX root = ` (may or may not contain whitespaces), ignore it
$(eval TARGET = $(filter-out $(foreach file, $(TARGET), $(shell \
	grep -l '%\W*!\W*TEX\W*root\W*=\W*' $(file).tex $(PATH_POSTFIX) \
)), $(TARGET)))

.DEFAULT: help

help:
ifeq ($(WINNT),1)
	@$(MAKE) _HELP | more
else
	@$(MAKE) _HELP | less
endif

_HELP:
	@echo "Usage: make [target] [variable=value]"
	@echo "Targets:"
	@echo "  [xe-]default: compile with xelatex"
	@echo "  svg: compile with xelatex and dvisvgm"
	@echo "  lua-default: compile with lualatex"
	@echo "  clean: clean all temporary files"
	@echo "  [help]: show this help message"
	@echo "Variables:"
	@echo "  It's recommended to set these variables in \`makefile\`"
	@echo "  COMPILE_NUM: number of times to compile, default 2"
	@echo "  TARGET: target file, default all .tex files"
	@echo "  TEXINPUTS: texinputs, default \"/opt/template//:\""
	@echo "  COMPILER: compiler to use, default \"xelatex\""
	@echo "  COMPILER_FLAGS: compiler flags to use, default is"
	@echo "    -shell-escape"
	@echo "    -interaction=nonstopmode"
	@echo "  BIBTEX: bibtex to use, default \"bibtex\""
	@echo "    Warning: biber engine is not supported by some packages"
	@echo "  DVISVGM: dvisvgm to use, default \"dvisvgm\""
	@echo "  DVISVGM_FLAGS: dvisvgm flags to use, default is"
	@echo "    --no-fonts"
	@echo "    -p1-"
	@echo "    -O"
	@echo "    --output=%f-%1p.svg"
	@echo "  EXTERNAL_FILES: external files used in compilation"
	@echo "    The files will be copied to the working directory"
	@echo "  -- !!! Read documentation before using these variables !!! --"
	@echo "  Use the following variables in command line"
	@echo "  Notice that in docker mode, TEXINPUTS does not work."
	@echo "  DOCKER: use docker to compile, default 0"
	@echo "  DOCKER_CONTEXT: docker context to use, default \"default\""
	@echo "  DOCKER_TAG: docker image tag to use, default \"latest\""
	@echo "  DOCKER_TIMEOUT: time to stop dead containers, default 1800"
	@echo "Detected targets:"
	@$(foreach file, $(TARGET), echo "  $(file).tex";)
	@echo "External files:"
	@$(foreach file, $(EXTERNAL_FILES), echo "  $(file) -> ./$(shell basename $(file))";)

# Processing stage

.WAIT:

_PRE_COMPILE_GLOBAL:
ifeq ($(DOCKER),1)
	find . -name '*.synctex.gz' -delete
	$(eval CONTAINER_ID := $(shell \
		docker --context $(DOCKER_CONTEXT) run --rm -d \
		ghcr.io/huangfusl/template:$(DOCKER_TAG) \
		sleep $(DOCKER_TIMEOUT) \
	))
	docker --context $(DOCKER_CONTEXT) cp . $(CONTAINER_ID):/data
	for file in $(EXTERNAL_FILES); do \
		docker --context $(DOCKER_CONTEXT) cp $$file $(CONTAINER_ID):/data; \
	done
	docker --context $(DOCKER_CONTEXT) exec -i $(CONTAINER_ID) \
		make -f /opt/template/makefile.latex.template _PRE_COMPILE_GLOBAL \
			DOCKER=2 TARGET="$(TARGET)" MAKEFLAGS="$(MAKEFLAGS)"
else
	for file in $(EXTERNAL_FILES); do \
		TARGET_NAME=$$(basename $$file); \
		ln -sf $$file $$TARGET_NAME; \
	done
endif

define COMPILE_TASK
_PRE_COMPILE_$1: _PRE_COMPILE_GLOBAL
ifneq ($(DOCKER),1)
	TITLE=$$$$(sed -n 's/^[[:space:]]*\\title{\(.*\)}/\1/p' $1.tex); \
	AUTHOR=$$$$(sed -n 's/^[[:space:]]*\\author{\(.*\)}/\1/p' $1.tex); \
	touch $1.xmpdata; \
	echo "\Title{$$$$TITLE}" >> $1.xmpdata; \
	echo "\Author{$$$$AUTHOR}" >> $1.xmpdata
endif

_COMPILE_$1:
ifneq ($(DOCKER),1)
	TARGET_DIR=$$$$(dirname $1); \
	TARGET_NAME=$$$$(basename $1); \
	cd $$$$TARGET_DIR; \
	for i in $$$$(seq $$(COMPILE_NUM) -1 1); do \
		if [ $$$$i -eq 1 ]; then \
			BIBTEXED=0; \
			for file in $$$$TARGET_NAME*.aux; do \
				if grep -qE "\\\citation\{.+\}" "$$$$file"; then \
					$$(BIBTEX) "$$$$file"; \
					BIBTEXED=1; \
				fi; \
			done; \
			if [ $$$$BIBTEXED -eq 1 ]; then \
				$$(COMPILER) $$(COMPILER_FLAGS) $$$$TARGET_NAME > $$(DEV_NULL); \
			fi; \
			if [ $$(SILENT) -eq 0 ]; then \
				$$(COMPILER) $$(COMPILER_FLAGS) -synctex=1 -file-line-error $$$$TARGET_NAME; \
			else \
				$$(COMPILER) $$(COMPILER_FLAGS) -synctex=1 $$$$TARGET_NAME > $$(DEV_NULL); \
			fi; \
		else \
			$$(COMPILER) $$(COMPILER_FLAGS) $$$$TARGET_NAME > $$(DEV_NULL); \
		fi; \
	done; \
	cd $$(WORKDIR);
endif

_SVG_$1:
ifneq ($(DOCKER),1)
	TARGET_DIR=$$$$(dirname $1); \
	TARGET_NAME=$$$$(basename $1); \
	cd $$$$TARGET_DIR; \
	$$(DVISVGM) $$$$TARGET_NAME.xdv $$(DVISVGM_FLAGS); \
	cd $$(WORKDIR);
endif

_WORKFLOW_$1: | _PRE_COMPILE_$1 _COMPILE_$1
_WORKFLOW_SVG_$1: | _PRE_COMPILE_$1 _COMPILE_$1 _SVG_$1

endef

_COMPILE_TASKS :=
_COMPILE_SVG_TASKS :=

$(foreach file, $(TARGET), $(eval \
	$(call COMPILE_TASK,$(file)) \
	$(eval _COMPILE_TASKS += _WORKFLOW_$(file)) \
	$(eval _COMPILE_SVG_TASKS += _WORKFLOW_SVG_$(file)) \
))

_PASSDOWN_ARGS = TARGET COMPILE_NUM COMPILER BIBTEX DVISVGM
_PASSDOWN_ARGS += DVISVGM_FLAGS MAKEFLAGS COMPILER_FLAGS
$(foreach arg, $(_PASSDOWN_ARGS), $(eval _PASSDOWN_SUFFIX += $(arg)="$$($(arg))"))

define _DOCKER_CMD
$1: $$($1_TASKS)
ifeq ($$(DOCKER),1)
	docker --context $(DOCKER_CONTEXT) \
		exec -i $$(CONTAINER_ID) make -f /opt/template/makefile.latex.template $1 \
		DOCKER=2 $$(_PASSDOWN_SUFFIX)
endif
endef

_ENTRIES = _COMPILE _COMPILE_SVG
$(foreach entry, $(_ENTRIES), $(eval $(call _DOCKER_CMD,$(entry))))

_POST_COMPILE:
ifeq ($(DOCKER),1)
	docker --context $(DOCKER_CONTEXT) \
		exec -i $(CONTAINER_ID) \
		make -f /opt/template/makefile.latex.template _POST_COMPILE \
			DOCKER=2
	docker --context $(DOCKER_CONTEXT) cp $(CONTAINER_ID):/data/. .
	docker --context $(DOCKER_CONTEXT) stop $(CONTAINER_ID) --time 0
else
	-for file in $(AUXILIARY_FILES); do \
		find . -name "$$file" -delete; \
	done
	-if [ $(DOCKER) -eq 2 ]; then \
		find . -type f -and -not -name '*.pdf' -and -not -name '*.svg' -delete; \
	fi
	-for file in $(EXTERNAL_FILES); do \
		TARGET_NAME=$$(basename $$file); \
		unlink $$TARGET_NAME; \
	done
endif

_XELATEX:
	$(eval COMPILER = $(XELATEX))
	$(eval COMPILER_FLAGS += $(XELATEX_FLAGS))

_LUALATEX:
	$(eval COMPILER = $(LUALATEX))
	$(eval COMPILER_FLAGS += $(LUALATEX_FLAGS))

_DVISVGM: | _XELATEX
	$(eval COMPILER_FLAGS += -output-driver='xdvipdfmx -E -i dvipdfmx-unsafe.cfg' -no-pdf)

default: | _COMPILE .WAIT _POST_COMPILE
svg: | _DVISVGM _COMPILE_SVG .WAIT _POST_COMPILE
xe-default: | _XELATEX default
xe-all: | _XELATEX all
lua-default: | _LUALATEX default
lua-all: | _LUALATEX all
clean: | _POST_COMPILE
